@model List<task03_0606.Models.FoodProduct>
@{
    ViewBag.Title = "Drinkproducts";
}
<style>
    div.row {
        margin: 0;
        padding: 0;
    }

    div.row {
        background-color: black;
    }
</style>
<h2>飲品/湯品</h2>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600" rel="stylesheet">
<link href="/css/Astyle.css" rel="stylesheet" type="text/css" />
<script src="/js/Aindex.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
@*<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>*@
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>*@
@*<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>*@


@*<header>
        <ul>
            <i class='fa fa-shopping-cart'>
                <span class='counter'></span>
            </i>
        </ul>
    </header>*@



<div class="row" >
    @foreach (task03_0606.Models.FoodProduct db in Model)
    {  
        
        <div class="product--red col-sm-2" id="content">
 

                <div class="row"id="list"></div>
                <!-- Button trigger modal -->
                <img src='~/photo/@db.productPicture' width='300' type="button" class="btn" data-toggle="modal" data-target="#exampleModalCenter.@db.productID" />

                <!-- Modal -->
                <div class="modal fade" id="exampleModalCenter.@db.productID" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle.@db.productID" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLongTitle.@db.productID">@db.productName</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <img src='~/photo/@db.productPicture' width='500' /><br />
                                @db.productDescription
                            </div>
                            <div class="modal-footer">

                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" onclick="AddToCart(@db.productID)">Add to basket</button>                            </div>
                        </div>
                    </div>
                </div>
                <div class='product_inner'>
                    <p>@db.productName</p>
                    <p>Price $@db.productPrice</p>
                    <button id="button" class="btn" type="button" onclick="AddToCart(@db.productID)">Add to basket</button>
                </div>

                <div class='product_overlay'>
                    <h2>Added to basket</h2>
                    <i class='fa fa-check'></i>
                </div>
            </div>

    }
    </div>
<script>

    var rnd = Math.random,
  flr = Math.floor;

    let canvas = document.createElement('canvas');
    document.getElementsByTagName('body')[0].appendChild(canvas);
    canvas.style.position = 'absolute';
    canvas.style.width = '100%';
    canvas.style.height = '100%';

    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    let ctx = canvas.getContext('2d');

    function rndNum(num) {
        return rnd() * num + 1;
    }

    function vector(x, y) {
        this.x = x;
        this.y = y;

        this.add = function (vec2) {
            this.x = this.x + vec2.x;
            this.y = this.y + vec2.y;
        }
    }

    function particle(pos, vel) {
        this.pos = new vector(pos.x, pos.y);
        this.vel = vel;
        this.dead = false;
        this.start = 0;

        this.update = function (time) {
            let timeSpan = time - this.start;

            if (timeSpan > 500) {
                this.dead = true;
            }

            if (!this.dead) {
                this.pos.add(this.vel);
                this.vel.y = this.vel.y + gravity;
            }
        };

        this.draw = function () {
            if (!this.dead) {
                drawDot(this.pos.x, this.pos.y, 1);
            }
        }

    }

    function firework(x, y) {

        this.pos = new vector(x, y);
        this.vel = new vector(0, -rndNum(10) - 3);
        this.color = 'hsl(' + rndNum(360) + ', 100%, 50%)'
        this.size = 4;
        this.dead = false;
        this.start = 0;
        let exParticles = [],
          exPLen = 100;

        let rootShow = true;

        this.update = function (time) {
            if (this.dead) {
                return;
            }

            rootShow = this.vel.y < 0;

            if (rootShow) {
                this.pos.add(this.vel);
                this.vel.y = this.vel.y + gravity;
            } else {
                if (exParticles.length === 0) {
                    flash = true;
                    for (let i = 0; i < exPLen; i++) {
                        exParticles.push(new particle(this.pos, new vector(-rndNum(10) + 5, -rndNum(10) + 5)));
                        exParticles[exParticles.length - 1].start = time;
                    }
                }
                let numOfDead = 0;
                for (let i = 0; i < exPLen; i++) {
                    let p = exParticles[i];
                    p.update(time);
                    if (p.dead) {
                        numOfDead++;
                    }
                }

                if (numOfDead === exPLen) {
                    this.dead = true;
                }

            }
        }

        this.draw = function () {
            if (this.dead) {
                return;
            }

            ctx.fillStyle = this.color;
            if (rootShow) {
                drawDot(this.pos.x, this.pos.y, this.size);
            } else {
                for (let i = 0; i < exPLen; i++) {
                    let p = exParticles[i];
                    p.draw();
                }
            }
        }

    }

    function drawDot(x, y, size) {
        ctx.beginPath();

        ctx.arc(x, y, size, 0, Math.PI * 2);
        ctx.fill();

        ctx.closePath();
    }

    var fireworks = [],
      gravity = 0.2,
      snapTime = 0,
      flash = false;

    function init() {
        let numOfFireworks = 20;
        for (let i = 0; i < numOfFireworks; i++) {
            fireworks.push(new firework(rndNum(canvas.width), canvas.height));
        }
    }

    function update(time) {
        for (let i = 0, len = fireworks.length; i < len; i++) {
            let p = fireworks[i];
            p.update(time);
        }
    }

    function draw(time) {
        update(time);

        ctx.fillStyle = 'rgba(0,0,0,0.3)';
        if (flash) {
            flash = false;
        }
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        ctx.fillStyle = 'white';
        ctx.font = "30px Arial";
        let newTime = time - snapTime;
        snapTime = time;

        //ctx.fillText(newTime,10,50);

        ctx.fillStyle = 'blue';
        for (let i = 0, len = fireworks.length; i < len; i++) {
            let p = fireworks[i];
            if (p.dead) {
                fireworks[i] = new firework(rndNum(canvas.width), canvas.height);
                p = fireworks[i];
                p.start = time;
            }
            p.draw();
        }

        window.requestAnimationFrame(draw);
    }

    window.addEventListener('resize', function () {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
    });

    init();
    draw();

</script>